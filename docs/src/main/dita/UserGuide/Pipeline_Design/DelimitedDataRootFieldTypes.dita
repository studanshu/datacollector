<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_zcg_bm4_fs">
  <title>Delimited Data Root Field Type</title>
  <conbody>
    <p><indexterm>delimited data<indexterm>root field
        type</indexterm></indexterm><indexterm>pipeline design<indexterm>delimited data root field
          type</indexterm></indexterm><indexterm>list-map root field type<indexterm>delimited
          data</indexterm></indexterm><indexterm>list root field type<indexterm>delimited
          data</indexterm></indexterm><indexterm>JavaScript Evaluator<indexterm>scripts for
          delimited data</indexterm></indexterm><indexterm>Jython Evaluator<indexterm>scripts for
          delimited data</indexterm></indexterm>When reading delimited data, <ph
        conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"/> can create
      records that use the list or list-map root field type. </p>
    <p>When <ph conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"/>
      creates records for delimited data, it creates a single root field of the specified type and
      writes the delimited data within the root field. </p>
    <p>Use the default list-map root field type to easily process delimited data.</p>
    <p>
      <dl>
        <dlentry>
          <dt>List-Map</dt>
          <dd>Provides easy use of field names or column positions in expressions. Recommended for
            all new pipelines.</dd>
          <dd>A list-map root field type results in a structure that preserves the order of data, as
            follows:<codeblock>/&lt;first header>:&lt;value>
/&lt;second header>:&lt;value>
/&lt;third header>:&lt;value>
...</codeblock></dd>
          <dd>
            <p>For example, with the list-map root field type, the following delimited rows:</p>
            <p>
              <codeblock><uicontrol>TransactionID,Type,UserID
</uicontrol>0003420303,04,362
0003420304,08,1008</codeblock>
            </p>
          </dd>
          <dd>are converted to records as
            follows:<codeblock>/TransactionID: 0003420303
/Type: 04
/UserID: 362

/TransactionID: 0003420304
/Type: 08
/UserID: 1008</codeblock></dd>
          <dd>If data does not include a header or if you choose to ignore a header, list-map
            records use the column position as a header as follows:
            <codeblock>0: &lt;value>
1: &lt;value>
2: &lt;value></codeblock></dd>
          <dd>For example, when you ignore the header for the same data, you get the following
            records:<codeblock>0: 0003420303
1: 04
2: 362

0: 0003420304
1: 08
2: 1008</codeblock></dd>
          <dd>In an expression, you can use the field name or the column position with a standard
            record function to call a field. For example, you can use either of the following
            record:value() expressions to return data in the TransactionID
            field:<codeblock>${record:value('/TransactionID')}
${record:value('[0]'}</codeblock></dd>
          <dd><note>When writing scripts for scripting processors, such as the Jython Evaluator or
              JavaScript Evaluator, you should treat list-map records as maps.</note>For more
            information about standard record functions, see <xref
              href="../Expression_Language/RecordFunctions.dita#concept_p1z_ggv_1r"/>.</dd>
        </dlentry>
        <dlentry>
          <dt>List </dt>
          <dd>Provides continued support for pipelines created before version 1.1.0. Not recommended
            for new pipelines.</dd>
          <dd>A list root field type results in list with an index for the header position and a map
            with each header and associated value, as
            follows:<codeblock>0
   /header = &lt;first header>
   /value = &lt;value for first header>
1
   /header = &lt;second header>
   /value = &lt;value for second header>
2  
   /header = &lt;third header>
   /value = &lt;value for third header>
...</codeblock></dd>
          <dd>
            <p>For example, the same delimited rows described above are converted to records as
              follows:</p>
            <codeblock>0
   /header = TransactionID
   /value = 0003420303
1
   /header = Type
   /value = 04
2
   /header = UserID
   /value = 362

0
   /header = TransactionID
   /value = 0003420304
1
   /header = Type
   /value = 08
2
   /header = UserID
   /value = 1008</codeblock>
          </dd>
          <dd>If the data does not include a header or if you choose to ignore a header, the list
            records omit the header from the map as
            follows:<codeblock>0
   /value = &lt;value>
1
   /value = &lt;value>
2
   /value = &lt;value>
...</codeblock></dd>
          <dd>For example, when you ignore the header for the same sample data, you get the
            following records:
            <codeblock>0
   /value = 0003420303
1
   /value = 04
2
   /value = 362

0
   /value = 0003420304
1
   /value = 08
2
   /value = 1008</codeblock>
          </dd>
          <dd>For data in the list records, you should either use the delimited data functions or
            include the full field path in standard record functions. For example, you can use the
            record:dValue() delimited data function to return the value associated with the
            specified header. </dd>
          <dd>
            <p>
              <note type="tip">You can use the record:dToMap() function to convert a list record to
                a map, and then use standard functions for record processing.</note>
            </p>
            <p>For more information about record:dToMap and full list of delimited data record
              functions and their syntax, see <xref
                href="../Expression_Language/RecordFunc-Delimited.dita#concept_s2c_q14_fs"/>.</p>
          </dd>
        </dlentry>
      </dl>
    </p>
  </conbody>
</concept>
