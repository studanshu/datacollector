<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_trt_thq_5r">
 <title>File Processing and Archived File Names</title>
 <shortdesc>File Tail processes the active file and archived files based on how the source server
  generates files. When you specify the naming convention for archived files, File Tail determines
  the file generation method and processes the data accordingly.</shortdesc>
 <conbody>
  <p><indexterm>File Tail origin<indexterm>file processing and archive file
    names</indexterm></indexterm><indexterm>file processing<indexterm>for File
    Tail</indexterm></indexterm>File Tail can process data based on the following common file
   generation and archive strategies:<dl>
    <dlentry>
     <dt>The server writes data to a single active file and generates archive files as needed</dt>
     <dd>The server writes new data to a single file, such as weblog.log. Periodically, it rolls
      older data from the active file to an archive file, such as weblog.log1 or
      weblog.log.2015-10-15. </dd>
     <dd>File Tail intelligently tracks its relative progress through new and archived data and is
      not affected by file name changes.</dd>
     <dd>File Tail can process archived files that use the following naming conventions:<ul
              id="ul_ury_gzq_5r">
              <li><uicontrol>Active File with Reverse Counter</uicontrol> - The server appends a
                number to the end of each archived file, such as data.1, data.2, and so on.<p>File
                  Tail processes files in reverse numeric order before progressing to the active
                  file.</p></li>
              <li><uicontrol>Active File with Date</uicontrol> - The server appends a date to the
                end of the archived file, such as event.log.2015-11, event.log.2015-12. This method
                is generally used by Log4j servers. File Tail provides a set of available date
                patterns. If the date pattern of your log files is not available, you might use
                  Alphabetical.<p>File Tail processes files in reverse order based on the selected
                  date pattern before progressing to the active file. </p></li>
              <li><uicontrol>Active File with Alphabetical</uicontrol> - The server generates files
                in alphabetically increasing order, such as file.json.a, file.json.b, file.json.c.
                You might use this method to process Apache logs archived with the logrotate
                utility. You can also use Alphabetical to process files with appended dates that do
                not match the provided date patterns.<p>File Tail processes files in alphabetical
                  order before progressing to the active file.</p></li>
            </ul></dd>
    </dlentry>
    <dlentry>
     <dt>The server writes a new active file as needed, archiving the previous file without
            renaming</dt>
     <dd>The server writes to an active file, creating a new active file as necessary. When it
      creates a new active file, it archives the previous active file without renaming it. The
      active file changes, but file names do not change. </dd>
     <dd>The server generates files using a pattern that you can define with a regular expression. </dd>
     <dd>Use <uicontrol>Files Matching a Pattern</uicontrol> as the archive file naming
      convention.</dd>
     <dd>File Tail processes the files in alphabetical order before progressing to the most recent
      file - the active file. </dd>
     <dd>For example, if you use log_[0-9]{4}-[0-9]{2}-[0-9]{2}\\.json as the file name pattern,
      File Tail might read log-2015-5-01.json, then log-2015-05-02.json, and so on - until it
      reaches the file for the current date.</dd>
    </dlentry>
   </dl></p>
 </conbody>
</concept>
