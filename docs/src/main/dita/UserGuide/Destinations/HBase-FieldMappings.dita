<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_vn5_cr5_4v">
 <title>Field Mappings</title>
 <shortdesc>When you configure the HBase destination, you map fields from records to HBase
        columns.</shortdesc>
 <conbody>
  <p><indexterm>HBase destination<indexterm>field mappings</indexterm></indexterm><indexterm>field
                    mappings<indexterm>HBase destination</indexterm></indexterm><indexterm>implicit
                field mappings<indexterm>HBase
                destination</indexterm></indexterm><indexterm>explicit field
                    mappings<indexterm>HBase destination</indexterm></indexterm>You can map fields
            to columns in the following ways:</p>
        <dl>
            <dlentry>
                <dt>Explicit field mappings</dt>
                <dd>By default, the HBase destination uses explicit field mappings. You select the
                    fields from records to map to HBase columns. Specify the HBase columns using the
                    following format: <codeph>&lt;column-family>:&lt;qualifier></codeph>. You then
                    define the storage type for the column in HBase. </dd>
                <dd>When you use explicit field mappings, you can configure the destination to
                    ignore missing field paths. If the destination encounters a mapped field path
                    that doesn’t exist in the record, the destination ignores the missing field path
                    and writes the remaining fields in the record to HBase.  </dd>
            </dlentry>
            <dlentry>
                <dt>Implicit field mappings</dt>
                <dd>When you configure the HBase destination to use implicit field mappings, the
                    destination writes data based on the matching field names. You can use implicit
                    field mappings when the field paths use the following
                    format:<codeblock>&lt;column-family>:&lt;qualifier></codeblock></dd>
                <dd>For example, if a field path is "cf:a", the destination can implicitly map the
                    field to the HBase table with the column family "cf" and the qualifier "a". </dd>
                <dd>When you use implicit field mappings, you can configure the destination to
                    ignore invalid columns. If the destination encounters a field path that cannot
                    be mapped to a valid HBase column, the destination ignores the invalid column
                    and writes the remaining fields in the record to HBase. </dd>
            </dlentry>
            <dlentry>
                <dt>Both implicit and explicit field mappings</dt>
                <dd>You can configure the destination to use implicit field mappings and then you
                    can override the mappings by defining explicit mappings for specific fields. </dd>
                <dd>For example, a record might contain some field paths that use the
                        <codeph>&lt;column-family>:&lt;qualifier></codeph> format and other field
                    paths that don’t use the required format. You can add explicit field mappings
                    for the field paths that do not use the required format. Or, you can use
                    explicit field mappings for fields that use the required format, but need to be
                    written to a different column. </dd>
            </dlentry>
        </dl>
 </conbody>
</concept>
