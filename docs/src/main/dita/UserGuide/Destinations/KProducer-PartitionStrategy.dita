<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_qpm_xp4_4r">
 <title>Partition Strategy</title>
 <shortdesc>The partition strategy determines how to write data to Kafka partitions. You can use a
    partition strategy to balance the work load or to write data semantically.</shortdesc>
 <conbody>
  <p><indexterm>Kafka Producer destination<indexterm>partition
        strategy</indexterm></indexterm><indexterm>Kafka Producer destination<indexterm>partition
          expression</indexterm></indexterm><indexterm>partition strategy<indexterm>Kafka
          Producer</indexterm></indexterm>The Kafka Producer provides the following partition strategies:<dl>
        <dlentry>
          <dt>Round-Robin</dt>
          <dd>Writes each record to a different partition using a cyclical order. Use for load
            balancing.</dd>
        </dlentry>
        <dlentry>
          <dt>Random</dt>
          <dd>Writes each record to a different partition using a random order. Use for load
            balancing.</dd>
        </dlentry>
        <dlentry>
          <dt>Expression</dt>
          <dd>Writes each record to a partition based on the results of the partition expression.
            Use to perform semantic partitioning. </dd>
          <dd>When you configure the partition expression, define the expression to evaluate to the
            partition where you want each record written. For example, the following expression
            writes records to two partitions based on the value in the Age
            field:<codeblock>${record:value('/Age') &lt; 21 ? 0 : 1}</codeblock></dd>
          <dd>The following example writes to three partitions based on the value of the Age
            field:<codeblock>${record:value('/a') &lt; 21 ? 0 : record:value('/a') &lt; 55 ? 1 : 2}</codeblock></dd>
        </dlentry>
      </dl></p>
 </conbody>
</concept>
