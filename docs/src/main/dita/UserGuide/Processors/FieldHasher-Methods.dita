<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ssq_5jb_mv">
 <title>Hash Methods</title>
 <shortdesc>Field Hasher provides several methods to hash data. When you hash a field more than
        once, Field Hasher uses the existing hash when generating the next hash. </shortdesc>
 <conbody>
        <p><indexterm>Field Hasher processor<indexterm>hash methods</indexterm></indexterm>Field
            Hasher hashes in the following order. When using multiple hash methods, note that the
            order can affect how data is hashed:<ol id="ol_ajh_fyb_mv">
                <li><uicontrol>Hash in Place</uicontrol> - Field Hasher replaces the original data
                    in a field with hashed values. <p>You can specify multiple fields to be hashed
                        with the same algorithm. You can also use different algorithms to hash
                        different sets of fields.</p></li>
                <li><uicontrol>Hash to Target </uicontrol>- Field Hasher hashes data in a field and
                    writes it to the specified field, header attribute, or both. It leaves the
                    original data in place. <p>If the specified target field or attribute does not
                        exist, Field Hasher creates it.</p><p>If you specify multiple fields to be
                        hashed with the same algorithm, Field Hasher hashes the fields
                        together.</p><p>If any of the fields are already hashed, Field Hasher uses
                        existing hash values to generate the new hash value.</p></li>
                <li><uicontrol>Hash Record </uicontrol>- Field Hasher hashes the record and writes
                    it to the specified field, header attribute, or both. You can include the record
                    header in the hash.<p>If the specified target field or attribute does not exist,
                        Field Hasher creates it.</p><p>If the record includes fields that are
                        already hashed, Field Hasher uses the hash values when hashing the
                        record.</p></li>
            </ol></p>
    </conbody>
</concept>
